/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.18 animated.glb --transform --types 
Files: animated.glb [11.01MB] > /Users/jimvanriper/Documents/Projects/swpwr/public/models/animated-transformed.glb [2.74MB] (75%)
*/

console.log("Hello, Animated!");

import * as THREE from "three";
import React, {
  forwardRef,
  useEffect,
  useImperativeHandle,
  useRef,
} from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF } from "three-stdlib";

import type { AvatarAPIType } from "../contexts/AvatarAPI";
import { parseEmotes, useAvatarAPI } from "../contexts/AvatarAPI";

type GLTFResult = GLTF & {
  nodes: {
    Mesh002: THREE.SkinnedMesh;
    Mesh002_1: THREE.SkinnedMesh;
    Mesh018: THREE.SkinnedMesh;
    Mesh018_1: THREE.SkinnedMesh;
    jiemao_L: THREE.SkinnedMesh;
    jiemao_R: THREE.SkinnedMesh;
    kouzi: THREE.SkinnedMesh;
    meimao_L: THREE.SkinnedMesh;
    meimao_R: THREE.SkinnedMesh;
    nurbsToPoly1: THREE.SkinnedMesh;
    nurbsToPoly10: THREE.SkinnedMesh;
    nurbsToPoly11: THREE.SkinnedMesh;
    nurbsToPoly12: THREE.SkinnedMesh;
    nurbsToPoly2: THREE.SkinnedMesh;
    nurbsToPoly3: THREE.SkinnedMesh;
    nurbsToPoly4: THREE.SkinnedMesh;
    nurbsToPoly5: THREE.SkinnedMesh;
    nurbsToPoly6: THREE.SkinnedMesh;
    nurbsToPoly7: THREE.SkinnedMesh;
    nurbsToPoly8: THREE.SkinnedMesh;
    nurbsToPoly9: THREE.SkinnedMesh;
    qunzi: THREE.SkinnedMesh;
    tongue: THREE.SkinnedMesh;
    mixamorigHips: THREE.Bone;
  };
  materials: {
    yifu: THREE.MeshStandardMaterial;
    yifu_bian: THREE.MeshStandardMaterial;
    face: THREE.MeshStandardMaterial;
    lambert3: THREE.MeshStandardMaterial;
    hua: THREE.MeshStandardMaterial;
    PaletteMaterial001: THREE.MeshStandardMaterial;
    PaletteMaterial002: THREE.MeshStandardMaterial;
    PaletteMaterial003: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

type ActionName =
  | "Armature.002|mixamo.com|Layer0"
  | "gratz:00"
  | "gratz:01"
  | "gratz:02"
  | "gratz:03"
  | "gratz:04"
  | "gratz:05"
  | "gratz:06"
  | "gratz:08"
  | "gratz:08.001"
  | "gratz:08.002"
  | "gratz:09"
  | "t-pose";
interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}
type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<
    JSX.IntrinsicElements["skinnedMesh"] | JSX.IntrinsicElements["bone"]
  >
>;

export type AvatarImperativeHandle = {
  emote: (emote: ActionName, repetitions?: number) => void;
  status: () => void;
};

const FoxyFuka = forwardRef(function Model(
  props: JSX.IntrinsicElements["group"],
  ref,
) {
  const group = useRef<THREE.Group>(null);
  const { nodes, materials, animations } = useGLTF(
    "./models/animated-transformed.glb",
  ) as GLTFResult;
  const { actions, names } = useAnimations(animations, group);

  const { setEmotes } = useAvatarAPI() as AvatarAPIType;

  useImperativeHandle(
    ref,
    () => {
      return {
        emote(emote: ActionName, repetitions = 5) {
          console.info("Emote:", emote);
          console.info("Repetitions:", repetitions);
          names.map((name) => {
            if (actions[name]?.isRunning() || actions[name]?.isScheduled())
              actions[name]?.fadeOut(0.5);
          });
          // actions["idle:01"]?.stop()
          actions[emote]
            ?.fadeIn(0.5)
            .setLoop(THREE.LoopRepeat, repetitions)
            .play();
          const delay = actions[emote]?.getClip().duration;
          actions["gratz:01"]?.startAt(delay!).fadeIn(0.5).play();
        },
        status() {
          const actionStatus = names.map((name) => {
            return {
              name,
              isRunning: actions[name]?.isRunning(),
              isScheduled: actions[name]?.isScheduled(),
            };
          });
          console.table(actionStatus);
        },
      };
    },
    [],
  );

  // Publish available emotes
  useEffect(() => {
    setEmotes(parseEmotes(names));
    actions["gratz:01"]?.reset().fadeIn(0.5).play();
  }, []);

  // JSX
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Armature" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <primitive object={nodes.mixamorigHips} />
        </group>
        <group name="duanxiu" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <skinnedMesh
            name="Mesh002"
            geometry={nodes.Mesh002.geometry}
            material={materials.yifu}
            skeleton={nodes.Mesh002.skeleton}
          />
          <skinnedMesh
            name="Mesh002_1"
            geometry={nodes.Mesh002_1.geometry}
            material={materials.yifu_bian}
            skeleton={nodes.Mesh002_1.skeleton}
          />
        </group>
        <group name="head1" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <skinnedMesh
            name="Mesh018"
            geometry={nodes.Mesh018.geometry}
            material={materials.face}
            skeleton={nodes.Mesh018.skeleton}
          />
          <skinnedMesh
            name="Mesh018_1"
            geometry={nodes.Mesh018_1.geometry}
            material={materials.yifu_bian}
            skeleton={nodes.Mesh018_1.skeleton}
          />
        </group>
        <skinnedMesh
          name="jiemao_L"
          geometry={nodes.jiemao_L.geometry}
          material={materials.lambert3}
          skeleton={nodes.jiemao_L.skeleton}
          rotation={[Math.PI / 2, 0, 0]}
          scale={0.01}
        />
        <skinnedMesh
          name="jiemao_R"
          geometry={nodes.jiemao_R.geometry}
          material={materials.lambert3}
          skeleton={nodes.jiemao_R.skeleton}
          rotation={[Math.PI / 2, 0, 0]}
          scale={0.01}
        />
        <skinnedMesh
          name="kouzi"
          geometry={nodes.kouzi.geometry}
          material={materials.hua}
          skeleton={nodes.kouzi.skeleton}
          rotation={[Math.PI / 2, 0, 0]}
          scale={0.01}
        />
        <skinnedMesh
          name="meimao_L"
          geometry={nodes.meimao_L.geometry}
          material={materials.PaletteMaterial001}
          skeleton={nodes.meimao_L.skeleton}
          rotation={[Math.PI / 2, 0, 0]}
          scale={0.01}
        />
        <skinnedMesh
          name="meimao_R"
          geometry={nodes.meimao_R.geometry}
          material={materials.PaletteMaterial001}
          skeleton={nodes.meimao_R.skeleton}
          rotation={[Math.PI / 2, 0, 0]}
          scale={0.01}
        />
        <skinnedMesh
          name="nurbsToPoly1"
          geometry={nodes.nurbsToPoly1.geometry}
          material={materials.PaletteMaterial002}
          skeleton={nodes.nurbsToPoly1.skeleton}
          rotation={[Math.PI / 2, 0, 0]}
          scale={0.01}
        />
        <skinnedMesh
          name="nurbsToPoly10"
          geometry={nodes.nurbsToPoly10.geometry}
          material={materials.PaletteMaterial003}
          skeleton={nodes.nurbsToPoly10.skeleton}
          rotation={[Math.PI / 2, 0, 0]}
          scale={0.01}
        />
        <skinnedMesh
          name="nurbsToPoly11"
          geometry={nodes.nurbsToPoly11.geometry}
          material={materials.PaletteMaterial001}
          skeleton={nodes.nurbsToPoly11.skeleton}
          rotation={[Math.PI / 2, 0, 0]}
          scale={0.01}
        />
        <skinnedMesh
          name="nurbsToPoly12"
          geometry={nodes.nurbsToPoly12.geometry}
          material={materials.PaletteMaterial001}
          skeleton={nodes.nurbsToPoly12.skeleton}
          rotation={[Math.PI / 2, 0, 0]}
          scale={0.01}
        />
        <skinnedMesh
          name="nurbsToPoly2"
          geometry={nodes.nurbsToPoly2.geometry}
          material={materials.PaletteMaterial002}
          skeleton={nodes.nurbsToPoly2.skeleton}
          rotation={[Math.PI / 2, 0, 0]}
          scale={0.01}
        />
        <skinnedMesh
          name="nurbsToPoly3"
          geometry={nodes.nurbsToPoly3.geometry}
          material={materials.PaletteMaterial001}
          skeleton={nodes.nurbsToPoly3.skeleton}
          rotation={[Math.PI / 2, 0, 0]}
          scale={0.01}
        />
        <skinnedMesh
          name="nurbsToPoly4"
          geometry={nodes.nurbsToPoly4.geometry}
          material={materials.PaletteMaterial001}
          skeleton={nodes.nurbsToPoly4.skeleton}
          rotation={[Math.PI / 2, 0, 0]}
          scale={0.01}
        />
        <skinnedMesh
          name="nurbsToPoly5"
          geometry={nodes.nurbsToPoly5.geometry}
          material={materials.PaletteMaterial001}
          skeleton={nodes.nurbsToPoly5.skeleton}
          rotation={[Math.PI / 2, 0, 0]}
          scale={0.01}
        />
        <skinnedMesh
          name="nurbsToPoly6"
          geometry={nodes.nurbsToPoly6.geometry}
          material={materials.PaletteMaterial003}
          skeleton={nodes.nurbsToPoly6.skeleton}
          rotation={[Math.PI / 2, 0, 0]}
          scale={0.01}
        />
        <skinnedMesh
          name="nurbsToPoly7"
          geometry={nodes.nurbsToPoly7.geometry}
          material={materials.PaletteMaterial001}
          skeleton={nodes.nurbsToPoly7.skeleton}
          rotation={[Math.PI / 2, 0, 0]}
          scale={0.01}
        />
        <skinnedMesh
          name="nurbsToPoly8"
          geometry={nodes.nurbsToPoly8.geometry}
          material={materials.PaletteMaterial001}
          skeleton={nodes.nurbsToPoly8.skeleton}
          rotation={[Math.PI / 2, 0, 0]}
          scale={0.01}
        />
        <skinnedMesh
          name="nurbsToPoly9"
          geometry={nodes.nurbsToPoly9.geometry}
          material={materials.PaletteMaterial001}
          skeleton={nodes.nurbsToPoly9.skeleton}
          rotation={[Math.PI / 2, 0, 0]}
          scale={0.01}
        />
        <skinnedMesh
          name="qunzi"
          geometry={nodes.qunzi.geometry}
          material={materials.yifu}
          skeleton={nodes.qunzi.skeleton}
          rotation={[Math.PI / 2, 0, 0]}
          scale={0.01}
        />
        <skinnedMesh
          name="tongue"
          geometry={nodes.tongue.geometry}
          material={materials.PaletteMaterial002}
          skeleton={nodes.tongue.skeleton}
          rotation={[Math.PI / 2, 0, 0]}
          scale={0.01}
        />
      </group>
    </group>
  );
});

export default FoxyFuka;

useGLTF.preload("./models/animated-transformed.glb");
