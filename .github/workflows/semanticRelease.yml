---
#---------------------------------------------------------
# written by:   Lawrence McDaniel - https://lawrencemcdaniel.com
# date: nov-2024
#
# usage:
# - Create a semantical release
# - Merge master into next, alpha, beta, and next-major
#---------------------------------------------------------
name: Semantic Release

on:
    workflow_dispatch:
    push:
      branches:
        - master

jobs:
  bump-version:
    runs-on: ubuntu-latest
    env:
      VERSION_FILE: package.json
      PACKAGE_PATH: ${{ github.workspace }}/

    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      # read ./package.json devDependencies @types/node and set env variable NODE_VERSION
      - name: Get Node.js version from package.json
        id: node_version
        run: |
          NODE_VERSION=$(node -p "require('./package.json').devDependencies['@types/node']")
          NODE_VERSION=${NODE_VERSION#^}
          echo "NODE_VERSION=$NODE_VERSION" >> $GITHUB_ENV

      # setup Node.js environment using whatever version is currently pinned in package.json
      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: ">=${{ env.NODE_VERSION }}"

      - name: Install npm dependencies
        run: npm install

      # 1.) fetch the latest release version from GitHub https://github.com/QueriumCorp/swpwr/releases/latest, 
      # extract the tag_name, and remove the 'v' from the beginning of the version.
      - name: Fetch latest GitHub release version
        id: latest_release
        run: |
          LATEST_RELEASE=$(curl -H "Authorization: token ${{ secrets.PAT }}" --silent "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r .tag_name)
          LATEST_RELEASE=${LATEST_RELEASE#v}  # Remove 'v' from the beginning of the version
          echo "LATEST_RELEASE=$LATEST_RELEASE" >> $GITHUB_ENV

      # 2.) fetch the current version from the package.json file
      - name: Get current version
        id: current_version
        run: |
          cd ${{ env.PACKAGE_PATH }}
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

      # 3.) Edge case. If the current version is less than the latest release version
      # then update the package.json file version attribute to mach the latest release version
      # and push the changes to the main branch.
      - name: Sync package.json with latest GitHub release
        if: env.CURRENT_VERSION != env.LATEST_RELEASE
        run: |
          if node -e 'process.exit(process.env.CURRENT_VERSION < process.env.LATEST_RELEASE ? 0 : 1)'; then
            jq --arg new_version "${{ env.LATEST_RELEASE }}" '.version = $new_version' package.json > tmp.$$.json && mv tmp.$$.json package.json
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add ${{ env.VERSION_FILE }}
            git commit -m "chore: [gh] Sync ${{ env.VERSION_FILE }} with latest GitHub release ${{ env.LATEST_RELEASE }} [skip ci]"
            git push https://${{ secrets.PAT }}@github.com/${{ github.repository }}.git HEAD:${{ github.ref }}
          fi
        env:
          VERSION_FILE: ${{ env.PACKAGE_PATH }}${{ env.VERSION_FILE }}

      # 4.) Use semantic-release to calculate the next version based on the current version and the commit history.
      # If the next version is different from the current version, set the VERSION_CHANGED variable to 'true'.
      - name: Get current version and calculate next version
        id: version
        run: |
          cd ${{ env.PACKAGE_PATH }}
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          cd ${{ github.workspace }}/
          NEXT_VERSION=$(npx semantic-release --dry-run --no-ci  | awk '/The next release version is/{print $NF}')
          NEXT_VERSION=${NEXT_VERSION:-$CURRENT_VERSION}
          VERSION_CHANGED=$([ "$CURRENT_VERSION" != "$NEXT_VERSION" ] && echo "true" || echo "false")
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
          echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_ENV
          echo "VERSION_CHANGED=$VERSION_CHANGED" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}

      # 5.) If we have a new version, update the version in package.json of the current branch.
      - name: Update package.json
        if: env.VERSION_CHANGED == 'true'
        id: update_version
        run: |
          cd ${{ env.PACKAGE_PATH }}
          jq --arg new_version "${{ env.NEXT_VERSION }}" '.version = $new_version' package.json > tmp.$$.json && mv tmp.$$.json package.json
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add ${{ env.VERSION_FILE }}
          git commit -m "chore: [gh] Update ${{ env.VERSION_FILE }} to ${{ env.NEXT_VERSION }} [skip ci]"
          git push https://${{ secrets.PAT }}@github.com/${{ github.repository }}.git HEAD:${{ github.ref }}
        env:
          VERSION_FILE: ${{ env.PACKAGE_PATH }}${{ env.VERSION_FILE }}
          GITHUB_TOKEN: ${{ secrets.PAT }}
          NEXT_VERSION: ${{ env.NEXT_VERSION }}
          VERSION_CHANGED: ${{ env.VERSION_CHANGED }}

  merge-master:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        id: checkout
        uses: actions/checkout@v4
        with:
            persist-credentials: false
            token: ${{ secrets.PAT }}

      - name: Merge master into open-release/redwood.master
        uses: ./.github/actions/merge-branch
        with:
            github-token: ${{ secrets.PAT }}
            source-branch: master
            target-branch: open-release/redwood.master

  semantic-release:
    needs: merge-master
    runs-on: ubuntu-latest
    env:
        GITHUB_TOKEN: ${{ secrets.PAT }}

    steps:
      - uses: actions/checkout@v4
        id: checkout
        with:
            persist-credentials: false

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v4
        id: semantic
        with:
            branches: |
                [
                '+([0-9])?(.{+([0-9]),x}).x',
                'master',
                'open-release/redwood.master',
                ]
            extra_plugins: |
                @semantic-release/git
                @semantic-release/changelog
        env:
            GIT_COMMITTER_NAME: github-actions[bot]
            GIT_COMMITTER_EMAIL: github-actions[bot]@users.noreply.github.com
            GIT_AUTHOR_NAME: github-actions[bot]
            GIT_AUTHOR_EMAIL: github-actions[bot]@users.noreply.github.com

      - name: Echo Publication Configration
        id: publish
        if: steps.semantic.outputs.new_release_published == 'true'
        run: echo "new release was published"
        shell: bash

      - name: Push updates to branch for major version
        id: push_major
        if: steps.semantic.outputs.new_release_published == 'true'
        run: "git push https://x-access-token:${{ secrets.PAT }}@github.com/${GITHUB_REPOSITORY}.git HEAD:refs/heads/v${{steps.semantic.outputs.new_release_major_version}}"
        shell: bash